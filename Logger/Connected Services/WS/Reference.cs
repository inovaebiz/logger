//------------------------------------------------------------------------------
// <auto-generated>
//     O código foi gerado por uma ferramenta.
//     Versão de Tempo de Execução:4.0.30319.42000
//
//     As alterações ao arquivo poderão causar comportamento incorreto e serão perdidas se
//     o código for gerado novamente.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Logger.WS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WS.ILoggerWriter")]
    public interface ILoggerWriter {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILoggerWriter/EscreverLog", ReplyAction="http://tempuri.org/ILoggerWriter/EscreverLogResponse")]
        bool EscreverLog(string log, string caminho);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/ILoggerWriter/EscreverLog", ReplyAction="http://tempuri.org/ILoggerWriter/EscreverLogResponse")]
        System.IAsyncResult BeginEscreverLog(string log, string caminho, System.AsyncCallback callback, object asyncState);
        
        bool EndEscreverLog(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILoggerWriterChannel : WS.ILoggerWriter, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EscreverLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EscreverLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoggerWriterClient : System.ServiceModel.ClientBase<WS.ILoggerWriter>, WS.ILoggerWriter {
        
        private BeginOperationDelegate onBeginEscreverLogDelegate;
        
        private EndOperationDelegate onEndEscreverLogDelegate;
        
        private System.Threading.SendOrPostCallback onEscreverLogCompletedDelegate;
        
        public LoggerWriterClient() {
        }
        
        public LoggerWriterClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LoggerWriterClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggerWriterClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LoggerWriterClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<EscreverLogCompletedEventArgs> EscreverLogCompleted;
        
        public bool EscreverLog(string log, string caminho) {
            return base.Channel.EscreverLog(log, caminho);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEscreverLog(string log, string caminho, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEscreverLog(log, caminho, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndEscreverLog(System.IAsyncResult result) {
            return base.Channel.EndEscreverLog(result);
        }
        
        private System.IAsyncResult OnBeginEscreverLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string log = ((string)(inValues[0]));
            string caminho = ((string)(inValues[1]));
            return this.BeginEscreverLog(log, caminho, callback, asyncState);
        }
        
        private object[] OnEndEscreverLog(System.IAsyncResult result) {
            bool retVal = this.EndEscreverLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEscreverLogCompleted(object state) {
            if ((this.EscreverLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EscreverLogCompleted(this, new EscreverLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EscreverLogAsync(string log, string caminho) {
            this.EscreverLogAsync(log, caminho, null);
        }
        
        public void EscreverLogAsync(string log, string caminho, object userState) {
            if ((this.onBeginEscreverLogDelegate == null)) {
                this.onBeginEscreverLogDelegate = new BeginOperationDelegate(this.OnBeginEscreverLog);
            }
            if ((this.onEndEscreverLogDelegate == null)) {
                this.onEndEscreverLogDelegate = new EndOperationDelegate(this.OnEndEscreverLog);
            }
            if ((this.onEscreverLogCompletedDelegate == null)) {
                this.onEscreverLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEscreverLogCompleted);
            }
            base.InvokeAsync(this.onBeginEscreverLogDelegate, new object[] {
                        log,
                        caminho}, this.onEndEscreverLogDelegate, this.onEscreverLogCompletedDelegate, userState);
        }
    }
}
